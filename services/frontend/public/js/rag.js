/**
 * RAG Manager –¥–ª—è AI Box Frontend
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ RAG —Å–µ—Ä–≤–∏—Å
 */

class RAGManager {
    constructor() {
        this.uploadedFiles = [];
        this.searchResults = [];
        this.elements = {};
        this.initialized = false;
        this.maxFileSize = 50 * 1024 * 1024; // 50MB
        this.allowedTypes = ['.pdf', '.docx', '.txt', '.html', '.htm'];
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    init() {
        if (this.initialized) return;

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
        this.elements = {
            uploadArea: document.getElementById('upload-area'),
            fileInput: document.getElementById('file-input'),
            uploadButton: document.getElementById('upload-button'),
            documentSearch: document.getElementById('document-search'),
            searchButton: document.getElementById('search-button'),
            searchResults: document.getElementById('search-results')
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (!this.elements.uploadArea || !this.elements.searchResults) {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã RAG');
            return;
        }

        // –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.bindEventHandlers();

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        this.loadUploadedDocuments();

        this.initialized = true;
        console.log('‚úÖ RAGManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    bindEventHandlers() {
        // Drag & Drop –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        this.elements.uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            this.elements.uploadArea.classList.add('dragover');
        });

        this.elements.uploadArea.addEventListener('dragleave', (e) => {
            e.preventDefault();
            this.elements.uploadArea.classList.remove('dragover');
        });

        this.elements.uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            this.elements.uploadArea.classList.remove('dragover');
            const files = Array.from(e.dataTransfer.files);
            this.handleFileSelection(files);
        });

        // –ö–ª–∏–∫ –ø–æ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        this.elements.uploadArea.addEventListener('click', () => {
            this.elements.fileInput.click();
        });

        // –í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ input
        this.elements.fileInput.addEventListener('change', (e) => {
            const files = Array.from(e.target.files);
            this.handleFileSelection(files);
        });

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        if (this.elements.uploadButton) {
            this.elements.uploadButton.addEventListener('click', () => {
                this.uploadSelectedFiles();
            });
        }

        // –ü–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        if (this.elements.searchButton) {
            this.elements.searchButton.addEventListener('click', () => {
                this.searchDocuments();
            });
        }

        // –ü–æ–∏—Å–∫ –ø–æ Enter
        if (this.elements.documentSearch) {
            this.elements.documentSearch.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    this.searchDocuments();
                }
            });
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
     */
    handleFileSelection(files) {
        console.log(`üìÅ –í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);

        const validFiles = [];
        const errors = [];

        files.forEach(file => {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
            if (!this.allowedTypes.includes(fileExtension)) {
                errors.push(`${file.name}: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞`);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if (file.size > this.maxFileSize) {
                errors.push(`${file.name}: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50MB)`);
                return;
            }

            validFiles.push(file);
        });

        // –ü–æ–∫–∞–∑ –æ—à–∏–±–æ–∫
        if (errors.length > 0) {
            Utils.showNotification(
                `–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã:\n${errors.join('\n')}`,
                'warning'
            );
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if (validFiles.length > 0) {
            this.addFilesToQueue(validFiles);
            Utils.showNotification(
                `–î–æ–±–∞–≤–ª–µ–Ω–æ ${validFiles.length} —Ñ–∞–π–ª(–æ–≤) –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏`,
                'success'
            );
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏
     */
    addFilesToQueue(files) {
        files.forEach(file => {
            const fileInfo = {
                id: Date.now() + '_' + Math.random().toString(36).substr(2, 9),
                file: file,
                name: file.name,
                size: file.size,
                type: file.type,
                status: 'pending', // pending, uploading, uploaded, error
                progress: 0,
                uploadTime: null,
                error: null
            };

            this.uploadedFiles.push(fileInfo);
        });

        this.updateUploadAreaDisplay();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    updateUploadAreaDisplay() {
        const pendingFiles = this.uploadedFiles.filter(f => f.status === 'pending');
        
        if (pendingFiles.length > 0) {
            const fileList = pendingFiles.map(f => 
                `‚Ä¢ ${f.name} (${this.formatFileSize(f.size)})`
            ).join('\n');

            this.elements.uploadArea.innerHTML = `
                <div class="upload-content">
                    <div class="upload-icon">üìÑ</div>
                    <p><strong>–§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–≥—Ä—É–∑–∫–µ:</strong></p>
                    <pre class="file-list">${fileList}</pre>
                    <p class="upload-hint">–ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã" –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p>
                </div>
            `;
        } else {
            this.elements.uploadArea.innerHTML = `
                <div class="upload-content">
                    <div class="upload-icon">üìÅ</div>
                    <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
                    <p class="upload-hint">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: PDF, DOCX, TXT, HTML</p>
                </div>
            `;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    async uploadSelectedFiles() {
        const pendingFiles = this.uploadedFiles.filter(f => f.status === 'pending');
        
        if (pendingFiles.length === 0) {
            Utils.showNotification('–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏', 'warning');
            return;
        }

        Utils.showLoading(`–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤: 0/${pendingFiles.length}`);

        let uploaded = 0;
        let errors = 0;

        for (const fileInfo of pendingFiles) {
            try {
                fileInfo.status = 'uploading';
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                const metadata = {
                    upload_time: new Date().toISOString(),
                    file_size: fileInfo.size,
                    file_type: fileInfo.type
                };

                // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
                const response = await AIBox.modules.api.uploadDocument(fileInfo.file, metadata);

                if (response.success) {
                    fileInfo.status = 'uploaded';
                    fileInfo.uploadTime = new Date().toISOString();
                    fileInfo.documentId = response.data.document_id;
                    uploaded++;
                } else {
                    fileInfo.status = 'error';
                    fileInfo.error = response.error?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';  
                    errors++;
                }
            } catch (error) {
                fileInfo.status = 'error';
                fileInfo.error = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                errors++;
            }

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            Utils.showLoading(`–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤: ${uploaded + errors}/${pendingFiles.length}`);
        }

        Utils.hideLoading();

        // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (uploaded > 0) {
            Utils.showNotification(
                `–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${uploaded} —Ñ–∞–π–ª(–æ–≤)`,
                'success'
            );
        }

        if (errors > 0) {
            Utils.showNotification(
                `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${errors} —Ñ–∞–π–ª(–æ–≤)`,
                'error'
            );
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.updateUploadAreaDisplay();
        this.displayUploadedFiles();
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    displayUploadedFiles() {
        const uploadedFiles = this.uploadedFiles.filter(f => f.status === 'uploaded');
        
        if (uploadedFiles.length === 0) {
            return;
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        let fileListSection = document.getElementById('uploaded-files-section');
        if (!fileListSection) {
            fileListSection = document.createElement('div');
            fileListSection.id = 'uploaded-files-section';
            fileListSection.className = 'section';
            fileListSection.innerHTML = `
                <h3>üìö –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</h3>
                <div id="uploaded-files-list" class="uploaded-files-list"></div>
            `;
            
            // –í—Å—Ç–∞–≤–∫–∞ –ø–æ—Å–ª–µ —Å–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            const uploadSection = this.elements.uploadArea.closest('.section');
            uploadSection.parentNode.insertBefore(fileListSection, uploadSection.nextSibling);
        }

        const filesList = document.getElementById('uploaded-files-list');
        filesList.innerHTML = uploadedFiles.map(file => `
            <div class="uploaded-file-item" data-file-id="${file.id}">
                <div class="file-info">
                    <div class="file-name">${file.name}</div>
                    <div class="file-details">
                        ${this.formatFileSize(file.size)} ‚Ä¢ 
                        ${Utils.formatDateTime(file.uploadTime)}
                    </div>
                </div>
                <div class="file-actions">
                    <button onclick="AIBox.modules.rag.deleteDocument('${file.id}')" 
                            class="btn-secondary btn-sm">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `).join('');

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (!document.querySelector('#uploaded-files-styles')) {
            const styles = document.createElement('style');
            styles.id = 'uploaded-files-styles';
            styles.textContent = `
                .uploaded-files-list {
                    display: flex;
                    flex-direction: column;
                    gap: 12px;
                }
                .uploaded-file-item {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 12px;
                    background: var(--gray-50);
                    border-radius: var(--radius-md);
                    border: 1px solid var(--gray-200);
                }
                .file-info .file-name {
                    font-weight: 500;
                    color: var(--gray-900);
                }
                .file-info .file-details {
                    font-size: var(--font-size-sm);
                    color: var(--gray-600);
                    margin-top: 4px;
                }
                .btn-sm {
                    padding: 6px 12px;
                    font-size: var(--font-size-sm);
                }
            `;
            document.head.appendChild(styles);
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
     */
    async searchDocuments() {
        const query = this.elements.documentSearch.value.trim();
        
        if (!query) {
            Utils.showNotification('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞', 'warning');
            return;
        }

        Utils.showLoading('–ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö...');

        try {
            const response = await AIBox.modules.api.searchDocuments(query);

            if (response.success) {
                this.displaySearchResults(response.data, query);
                Utils.showNotification('–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');
            } else {
                this.displaySearchError(response.error);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            this.displaySearchError(error);
        } finally {
            Utils.hideLoading();
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    displaySearchResults(data, query) {
        const results = data.results || data.matches || [];
        
        if (results.length === 0) {
            this.elements.searchResults.innerHTML = `
                <div class="no-results">
                    <p>–ü–æ –∑–∞–ø—Ä–æ—Å—É "<strong>${query}</strong>" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</p>
                    <ul>
                        <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</li>
                        <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è</li>
                        <li>–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</li>
                    </ul>
                </div>
            `;
            return;
        }

        const resultsHtml = `
            <div class="search-header">
                <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"</h4>
                <p>–ù–∞–π–¥–µ–Ω–æ: ${results.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π</p>
            </div>
            <div class="search-results-list">
                ${results.map((result, index) => `
                    <div class="search-result-item">
                        <div class="result-header">
                            <span class="result-number">#${index + 1}</span>
                            <span class="result-score">–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${Math.round((result.score || 0) * 100)}%</span>
                        </div>
                        <div class="result-content">
                            ${this.highlightSearchTerm(result.content || result.text || '', query)}
                        </div>
                        ${result.metadata ? `
                            <div class="result-metadata">
                                ${result.metadata.source ? `üìÑ ${result.metadata.source}` : ''}
                                ${result.metadata.page ? ` ‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${result.metadata.page}` : ''}
                            </div>
                        ` : ''}
                    </div>
                `).join('')}
            </div>
        `;

        this.elements.searchResults.innerHTML = resultsHtml;

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        if (!document.querySelector('#search-results-styles')) {
            const styles = document.createElement('style');
            styles.id = 'search-results-styles';
            styles.textContent = `
                .search-header {
                    margin-bottom: 20px;
                    padding-bottom: 12px;
                    border-bottom: 1px solid var(--gray-200);
                }
                .search-header h4 {
                    color: var(--gray-900);
                    margin-bottom: 8px;
                }
                .search-header p {
                    color: var(--gray-600);
                    font-size: var(--font-size-sm);
                }
                .search-results-list {
                    display: flex;
                    flex-direction: column;
                    gap: 16px;
                }
                .search-result-item {
                    padding: 16px;
                    background: var(--white);
                    border: 1px solid var(--gray-200);
                    border-radius: var(--radius-md);
                    border-left: 4px solid var(--primary-color);
                }
                .result-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 12px;
                }
                .result-number {
                    font-weight: 600;
                    color: var(--primary-color);
                }
                .result-score {
                    font-size: var(--font-size-sm);
                    color: var(--gray-600);
                }
                .result-content {
                    line-height: 1.6;
                    margin-bottom: 8px;
                }
                .result-metadata {
                    font-size: var(--font-size-sm);
                    color: var(--gray-600);
                    font-style: italic;
                }
                .highlight {
                    background: #fef3c7;
                    padding: 2px 4px;
                    border-radius: 2px;
                    font-weight: 500;
                }
                .no-results {
                    text-align: center;
                    padding: 40px 20px;
                    color: var(--gray-600);
                }
                .no-results ul {
                    text-align: left;
                    display: inline-block;
                    margin-top: 16px;
                }
            `;
            document.head.appendChild(styles);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞
     */
    displaySearchError(error) {
        this.elements.searchResults.innerHTML = `
            <div class="search-error">
                <h4>‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</h4>
                <p>${error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö'}</p>
                <p><small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ</small></p>
            </div>
        `;
    }

    /**
     * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞
     */
    highlightSearchTerm(text, term) {
        if (!term) return text;
        
        const regex = new RegExp(`(${term})`, 'gi');
        return text.replace(regex, '<span class="highlight">$1</span>');
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
     */
    async deleteDocument(fileId) {
        if (!confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç?')) {
            return;
        }

        const fileIndex = this.uploadedFiles.findIndex(f => f.id === fileId);
        if (fileIndex === -1) {
            Utils.showNotification('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        const fileInfo = this.uploadedFiles[fileIndex];
        
        try {
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            // const response = await AIBox.modules.api.deleteDocument(fileInfo.documentId);
            
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            this.uploadedFiles.splice(fileIndex, 1);
            this.displayUploadedFiles();
            
            Utils.showNotification(`–î–æ–∫—É–º–µ–Ω—Ç "${fileInfo.name}" —É–¥–∞–ª–µ–Ω`, 'success');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
            Utils.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞', 'error');
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
     */
    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadUploadedDocuments() {
        try {
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            // const response = await AIBox.modules.api.getUploadedDocuments();
            // if (response.success) {
            //     this.uploadedFiles = response.data.map(doc => ({...}));
            //     this.displayUploadedFiles();
            // }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RAG
     */
    getRAGStats() {
        const uploadedCount = this.uploadedFiles.filter(f => f.status === 'uploaded').length;
        const pendingCount = this.uploadedFiles.filter(f => f.status === 'pending').length;
        const errorCount = this.uploadedFiles.filter(f => f.status === 'error').length;
        
        return {
            totalFiles: this.uploadedFiles.length,
            uploaded: uploadedCount,
            pending: pendingCount,
            errors: errorCount,
            searchResults: this.searchResults.length
        };
    }
}