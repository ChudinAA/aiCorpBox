---
- name: Deploy AI Box Infrastructure
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    docker_compose_version: "2.20.0"
    helm_version: "3.12.0"
    kubectl_version: "1.28.0"

  pre_tasks:
    - name: Update package cache
      package:
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Update package cache (RHEL)
      yum:
        update_cache: yes
      when: ansible_os_family == "RedHat"

  roles:
    - docker
    - k3s

  tasks:
    - name: Install required packages
      package:
        name:
          - curl
          - wget
          - git
          - htop
          - unzip
          - jq
          - python3
          - python3-pip
        state: present

    - name: Install kubectl
      get_url:
        url: "https://dl.k8s.io/release/v{{ kubectl_version }}/bin/linux/amd64/kubectl"
        dest: /usr/local/bin/kubectl
        mode: '0755'
        owner: root
        group: root

    - name: Install Helm
      unarchive:
        src: "https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz"
        dest: /tmp
        remote_src: yes
        creates: /tmp/linux-amd64/helm

    - name: Copy Helm binary
      copy:
        src: /tmp/linux-amd64/helm
        dest: /usr/local/bin/helm
        mode: '0755'
        owner: root
        group: root
        remote_src: yes

    - name: Create AI Box directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /opt/ai-box
        - /opt/ai-box/data
        - /opt/ai-box/logs
        - /opt/ai-box/config

    - name: Configure firewall for K3s
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - "6443"  # K3s API server
        - "10250" # Kubelet
        - "8472"  # Flannel VXLAN
      when: ansible_os_family == "Debian"

    - name: Configure firewall for K3s (RHEL)
      firewalld:
        port: "{{ item }}/tcp"
        permanent: yes
        state: enabled
      loop:
        - "6443"
        - "10250"
        - "8472"
      when: ansible_os_family == "RedHat"

    - name: Set up GPU support (if applicable)
      block:
        - name: Install NVIDIA container toolkit
          shell: |
            distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
            && curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | apt-key add - \
            && curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | tee /etc/apt/sources.list.d/nvidia-docker.list
            apt-get update
            apt-get install -y nvidia-docker2
          when: ansible_os_family == "Debian" and gpu_enabled is defined and gpu_enabled

        - name: Configure Docker for GPU
          copy:
            content: |
              {
                "default-runtime": "nvidia",
                "runtimes": {
                  "nvidia": {
                    "path": "nvidia-container-runtime",
                    "runtimeArgs": []
                  }
                }
              }
            dest: /etc/docker/daemon.json
          when: gpu_enabled is defined and gpu_enabled
          notify: restart docker

      when: gpu_enabled is defined and gpu_enabled

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted
        daemon_reload: yes

- name: Configure K3s Master Nodes
  hosts: masters
  become: yes
  serial: 1

  tasks:
    - name: Initialize first master
      shell: |
        curl -sfL https://get.k3s.io | sh -s - server \
          --cluster-init \
          --token {{ k3s_token }} \
          --disable traefik \
          --disable servicelb \
          --write-kubeconfig-mode 644
      when: inventory_hostname == groups['masters'][0]

    - name: Wait for first master to be ready
      wait_for:
        port: 6443
        host: "{{ ansible_host }}"
        timeout: 300
      when: inventory_hostname == groups['masters'][0]

    - name: Join additional masters
      shell: |
        curl -sfL https://get.k3s.io | sh -s - server \
          --server https://{{ hostvars[groups['masters'][0]]['ansible_host'] }}:6443 \
          --token {{ k3s_token }} \
          --disable traefik \
          --disable servicelb \
          --write-kubeconfig-mode 644
      when: inventory_hostname != groups['masters'][0]

- name: Configure K3s Worker Nodes
  hosts: workers:gpu_workers
  become: yes

  tasks:
    - name: Join workers to cluster
      shell: |
        curl -sfL https://get.k3s.io | K3S_URL=https://{{ hostvars[groups['masters'][0]]['ansible_host'] }}:6443 K3S_TOKEN={{ k3s_token }} sh -

- name: Configure AI Box Services
  hosts: masters[0]
  become: yes

  tasks:
    - name: Copy kubeconfig for regular user
      copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: /home/{{ ansible_user }}/.kube/config
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
        remote_src: yes

    - name: Create .kube directory
      file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Add Helm repositories
      shell: |
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo add qdrant https://qdrant.github.io/qdrant-helm
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update
      become_user: "{{ ansible_user }}"
      environment:
        KUBECONFIG: /home/{{ ansible_user }}/.kube/config

    - name: Install NGINX Ingress Controller
      shell: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.0/deploy/static/provider/cloud/deploy.yaml
      become_user: "{{ ansible_user }}"
      environment:
        KUBECONFIG: /home/{{ ansible_user }}/.kube/config

    - name: Wait for ingress controller
      shell: |
        kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=300s
      become_user: "{{ ansible_user }}"
      environment:
        KUBECONFIG: /home/{{ ansible_user }}/.kube/config
