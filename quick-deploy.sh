#!/bin/bash
# AI Box - –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
# –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º –¥–ª—è –ª—é–±–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -eq 0 ]; then
    echo "AI Box - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "  $0 local     - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ"
    echo "  $0 server    - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"
    echo "  $0 cluster   - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 local                    # –ë—ã—Å—Ç—Ä–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
    echo "  $0 server                   # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ Ansible"
    echo "  $0 cluster                  # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ K8s+Helm"
    echo ""
    exit 1
fi

DEPLOYMENT_TYPE=$1
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$PROJECT_ROOT/config/aibox-config.yaml"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
if [ ! -f "$CONFIG_FILE" ]; then
    log_info "–°–æ–∑–¥–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é..."
    python3 deploy.py --create-config
fi

log_info "üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ AI Box: $DEPLOYMENT_TYPE"
echo "=================================================="

case $DEPLOYMENT_TYPE in
    "local")
        log_info "üìã –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ–π –º–∞—à–∏–Ω–µ"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
        if ! command -v docker &> /dev/null; then
            log_warning "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é..."
            if [[ "$OSTYPE" == "linux-gnu"* ]]; then
                curl -fsSL https://get.docker.com -o get-docker.sh
                sh get-docker.sh
                sudo systemctl enable docker
                sudo systemctl start docker
                sudo usermod -aG docker $USER
                log_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è."
            else
                log_error "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ Linux"
                log_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –≤—Ä—É—á–Ω—É—é: https://docs.docker.com/get-docker/"
                exit 1
            fi
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
        if ! command -v docker-compose &> /dev/null; then
            log_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
        fi
        
        # –°–æ–∑–¥–∞–Ω–∏–µ docker-compose —Ñ–∞–π–ª–∞
        log_info "‚öôÔ∏è –°–æ–∑–¥–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker Compose..."
        cat > docker-compose.local.yml << 'EOF'
version: '3.8'

services:
  # AI Box Gateway - –æ—Å–Ω–æ–≤–Ω–æ–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  gateway:
    image: python:3.11-slim
    ports:
      - "5000:5000"
    volumes:
      - .:/app
    working_dir: /app
    command: >
      bash -c "
        pip install --no-cache-dir -r requirements.txt &&
        python demo_gateway.py
      "
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/aibox
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_URL=http://ollama:11434
    depends_on:
      - postgres
      - qdrant
      - ollama
    networks:
      - aibox-network
    restart: unless-stopped

  # Ollama - –ª–æ–∫–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - aibox-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # PostgreSQL - –æ—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: aibox
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - aibox-network
    restart: unless-stopped

  # Qdrant - –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - aibox-network
    restart: unless-stopped

  # Prometheus - —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - aibox-network
    restart: unless-stopped

  # Grafana - –¥–∞—à–±–æ—Ä–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - aibox-network
    restart: unless-stopped

volumes:
  postgres-data:
  qdrant-data:
  ollama-data:
  prometheus-data:
  grafana-data:

networks:
  aibox-network:
    driver: bridge
EOF

        # –°–æ–∑–¥–∞–Ω–∏–µ requirements.txt –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if [ ! -f "requirements.txt" ]; then
            log_info "üì¶ –°–æ–∑–¥–∞—é requirements.txt..."
            cat > requirements.txt << 'EOF'
fastapi==0.104.1
uvicorn==0.24.0
sqlalchemy==2.0.23
psycopg2-binary==2.9.9
pydantic==2.5.0
structlog==23.2.0
prometheus-client==0.19.0
aiohttp==3.9.1
PyYAML==6.0.1
EOF
        fi
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Prometheus
        mkdir -p config
        cat > config/prometheus.yml << 'EOF'
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'aibox-gateway'
    static_configs:
      - targets: ['gateway:5000']
    metrics_path: '/metrics'
    scrape_interval: 5s
EOF
        
        log_info "üîÑ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
        docker-compose -f docker-compose.local.yml up -d
        
        log_info "‚è±Ô∏è –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        sleep 30
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        if curl -s http://localhost:5000/health > /dev/null; then
            log_success "‚úÖ AI Box —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –ª–æ–∫–∞–ª—å–Ω–æ!"
            echo ""
            echo "üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000"
            echo "üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:5000/docs"
            echo "üìä Grafana: http://localhost:3000 (admin/admin)"
            echo "üîç Prometheus: http://localhost:9090"
            echo "‚ù§Ô∏è  –°—Ç–∞—Ç—É—Å: http://localhost:5000/health"
            echo ""
            echo "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ AI –º–æ–¥–µ–ª–µ–π:"
            echo "curl -X POST http://localhost:11434/api/pull -d '{\"name\":\"llama3.1\"}'"
        else
            log_error "‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose -f docker-compose.local.yml logs"
        fi
        ;;
        
    "server")
        log_info "üåê –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ansible
        if ! command -v ansible-playbook &> /dev/null; then
            log_info "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Ansible..."
            if command -v pip3 &> /dev/null; then
                pip3 install ansible
            elif command -v apt &> /dev/null; then
                sudo apt update
                sudo apt install -y ansible
            elif command -v yum &> /dev/null; then
                sudo yum install -y ansible
            else
                log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Ansible –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                exit 1
            fi
        fi
        
        log_info "üîß –ó–∞–ø—É—Å–∫–∞—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Ansible..."
        ansible-playbook -i ansible/inventory.yml ansible/deploy-server.yml
        ;;
        
    "cluster")
        log_info "‚ò∏Ô∏è –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ Kubernetes"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        missing_tools=()
        for tool in kubectl helm ansible-playbook; do
            if ! command -v $tool &> /dev/null; then
                missing_tools+=($tool)
            fi
        done
        
        if [ ${#missing_tools[@]} -ne 0 ]; then
            log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${missing_tools[*]}"
            log_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∞"
            exit 1
        fi
        
        log_info "üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ Ansible..."
        ansible-playbook -i ansible/cluster-inventory.yml ansible/prepare-cluster.yml
        
        log_info "üì¶ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Helm..."
        helm install aibox ./helm/aibox -f config/cluster-values.yaml --create-namespace --namespace aibox
        
        log_success "‚úÖ AI Box —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ!"
        log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: kubectl get pods -n aibox"
        ;;
        
    *)
        log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: $DEPLOYMENT_TYPE"
        log_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: local, server, cluster"
        exit 1
        ;;
esac

log_success "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ./docs/"
echo "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ./config/aibox-config.yaml"