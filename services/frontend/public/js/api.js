/**
 * API Client –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Backend —á–µ—Ä–µ–∑ REST API
 * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–±–æ—Å–æ–±–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */

class APIClient {
    constructor() {
        this.baseURL = '/api';
        this.timeout = 30000;
        this.headers = {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        };
    }

    /**
     * –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    async request(method, url, data = null, options = {}) {
        const requestOptions = {
            method: method.toUpperCase(),
            headers: { ...this.headers, ...options.headers },
            ...options
        };

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è POST/PUT –∑–∞–ø—Ä–æ—Å–æ–≤
        if (data && !['GET', 'DELETE'].includes(requestOptions.method)) {
            if (data instanceof FormData) {
                // –î–ª—è FormData –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type
                delete requestOptions.headers['Content-Type'];
                requestOptions.body = data;
            } else {
                requestOptions.body = JSON.stringify(data);
            }
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
        if (data && requestOptions.method === 'GET') {
            const params = new URLSearchParams(data);
            url += `?${params.toString()}`;
        }

        const fullURL = url.startsWith('http') ? url : `${this.baseURL}${url}`;

        try {
            console.log(`üîÑ API Request: ${requestOptions.method} ${fullURL}`);
            
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), this.timeout);
            
            const response = await fetch(fullURL, {
                ...requestOptions,
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            const responseData = await this.handleResponse(response);
            console.log(`‚úÖ API Response: ${response.status} ${fullURL}`);
            
            return responseData;

        } catch (error) {
            console.error(`‚ùå API Error: ${fullURL}`, error);
            throw this.handleError(error, fullURL);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async handleResponse(response) {
        let data;
        const contentType = response.headers.get('content-type');
        
        if (contentType && contentType.includes('application/json')) {
            data = await response.json();
        } else {
            data = await response.text();
        }

        if (!response.ok) {
            throw {
                status: response.status,
                message: data.error?.message || data.message || `HTTP ${response.status}`,
                data: data
            };
        }

        return data;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
     */
    handleError(error, url) {
        if (error.name === 'AbortError') {
            return {
                type: 'timeout',
                message: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞',
                url: url
            };
        }

        if (error.status) {
            return {
                type: 'http_error',
                status: error.status,
                message: error.message,
                data: error.data,
                url: url
            };
        }

        return {
            type: 'network_error',
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞',
            details: error.message,
            url: url
        };
    }

    // HTTP –º–µ—Ç–æ–¥—ã
    async get(url, params = null, options = {}) {
        return this.request('GET', url, params, options);
    }

    async post(url, data = null, options = {}) {
        return this.request('POST', url, data, options);
    }

    async put(url, data = null, options = {}) {
        return this.request('PUT', url, data, options);
    }

    async delete(url, options = {}) {
        return this.request('DELETE', url, null, options);
    }

    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è AI Box API

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Gateway
     */
    async checkGatewayHealth() {
        return this.get('/gateway/health');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–∞—Ö
     */
    async getServicesInfo() {
        return this.get('/services');
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async sendChatMessage(message, serviceType = 'general', sessionId = null) {
        return this.post('/chat', {
            message,
            service_type: serviceType,
            session_id: sessionId
        });
    }

    /**
     * RAG - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
     */
    async uploadDocument(file, metadata = {}) {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('metadata', JSON.stringify(metadata));

        return this.post('/rag/upload', formData);
    }

    /**
     * RAG - –ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
     */
    async searchDocuments(query, filters = {}) {
        return this.post('/rag/search', { query, filters });
    }

    /**
     * Agents - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
     */
    async getAvailableAgents() {
        return this.get('/agents');
    }

    /**
     * Agents - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–º
     */
    async executeAgentTask(agentType, task, context = {}) {
        return this.post('/agents/execute', {
            agent_type: agentType,
            task,
            context
        });
    }

    /**
     * Database - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã
     */
    async getDatabaseSchema() {
        return this.get('/database/schema');
    }

    /**
     * Database - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
     */
    async executeDatabaseQuery(query, safeMode = true) {
        return this.post('/database/query', {
            query,
            safe_mode: safeMode
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
     */
    async getSystemMetrics() {
        return this.get('/metrics');
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏—Ä—É—é—â–∏–π –º–µ—Ç–æ–¥
     */
    async proxyRequest(method, path, data = null) {
        return this.request(method, `/proxy/${path}`, data);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Frontend —Å–µ—Ä–≤–∏—Å–µ
     */
    async getFrontendInfo() {
        return this.get('/info');
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
class APIErrorHandler {
    static handle(error, context = '') {
        let message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';
        let type = 'error';

        switch (error.type) {
            case 'timeout':
                message = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞';
                break;
            case 'network_error':
                message = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
                break;
            case 'http_error':
                if (error.status === 400) {
                    message = error.message || '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞';
                } else if (error.status === 401) {
                    message = '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è';
                } else if (error.status === 403) {
                    message = '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω';
                } else if (error.status === 404) {
                    message = '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';
                } else if (error.status === 500) {
                    message = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
                } else if (error.status === 503) {
                    message = '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                } else {
                    message = error.message || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${error.status})`;
                }
                break;
            default:
                message = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        }

        if (context) {
            message = `${context}: ${message}`;
        }

        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (window.Utils) {
            window.Utils.showNotification(message, type);
        } else {
            console.error(message);
        }

        return { success: false, error: error, message: message };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
window.api = {
    async call(apiMethod, ...args) {
        try {
            return await apiMethod.apply(this, args);
        } catch (error) {
            return APIErrorHandler.handle(error);
        }
    }
};