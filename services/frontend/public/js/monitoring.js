/**
 * Monitoring Manager –¥–ª—è AI Box Frontend
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
 */

class MonitoringManager {
    constructor() {
        this.metrics = null;
        this.refreshInterval = null;
        this.elements = {};
        this.initialized = false;
        this.autoRefresh = false;
        this.refreshIntervalMs = 30000; // 30 —Å–µ–∫—É–Ω–¥
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Monitoring –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    init() {
        if (this.initialized) return;

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
        this.elements = {
            refreshButton: document.getElementById('refresh-metrics'),
            metricsDisplay: document.getElementById('metrics-display')
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (!this.elements.metricsDisplay) {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Monitoring');
            return;
        }

        // –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.bindEventHandlers();

        // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.loadSystemMetrics();

        this.initialized = true;
        console.log('‚úÖ MonitoringManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    bindEventHandlers() {
        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        if (this.elements.refreshButton) {
            this.elements.refreshButton.addEventListener('click', () => {
                this.loadSystemMetrics();
            });
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
     */
    async loadSystemMetrics() {
        this.showLoadingState();

        try {
            const response = await AIBox.modules.api.getSystemMetrics();

            if (response.success) {
                this.metrics = response.data;
                this.displaySystemMetrics();
                Utils.showNotification('–ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
            } else {
                this.displayMetricsError(response.error);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', error);
            this.displayMetricsError(error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoadingState() {
        this.elements.metricsDisplay.innerHTML = `
            <div class="metrics-loading">
                <div class="spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫...</p>
            </div>
        `;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
     */
    displaySystemMetrics() {
        if (!this.metrics) {
            this.elements.metricsDisplay.innerHTML = `
                <div class="no-metrics">
                    <p>–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
                    <p><small>–ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏</small></p>
                </div>
            `;
            return;
        }

        // –ü–∞—Ä—Å–∏–Ω–≥ Prometheus –º–µ—Ç—Ä–∏–∫ –µ—Å–ª–∏ –æ–Ω–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        const parsedMetrics = this.parsePrometheusMetrics(this.metrics);

        const metricsHtml = `
            <div class="metrics-container">
                ${this.renderMetricsOverview(parsedMetrics)}
                ${this.renderServiceMetrics(parsedMetrics)}
                ${this.renderPerformanceMetrics(parsedMetrics)}
                ${this.renderResourceMetrics(parsedMetrics)}
                ${this.renderAutoRefreshControls()}
            </div>
        `;

        this.elements.metricsDisplay.innerHTML = metricsHtml;

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –º–µ—Ç—Ä–∏–∫
        this.addMetricsStyles();

        // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (this.autoRefresh) {
            this.startAutoRefresh();
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
     */
    renderMetricsOverview(metrics) {
        const lastUpdate = new Date().toLocaleString('ru-RU');
        
        return `
            <div class="metrics-section">
                <h3>üìä –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã</h3>
                <div class="metrics-grid">
                    <div class="metric-card">
                        <div class="metric-value">${metrics.gateway?.requests_total || 'N/A'}</div>
                        <div class="metric-label">–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                        <div class="metric-trend">‚ÜóÔ∏è –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value">${this.formatDuration(metrics.gateway?.uptime || 0)}</div>
                        <div class="metric-label">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</div>
                        <div class="metric-trend">üöÄ Gateway</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value">${metrics.websocket?.active_connections || 0}</div>
                        <div class="metric-label">WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π</div>
                        <div class="metric-trend">üîå –ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value">${this.formatResponseTime(metrics.gateway?.avg_response_time || 0)}</div>
                        <div class="metric-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞</div>
                        <div class="metric-trend">‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
                    </div>
                </div>
                <div class="last-update">
                    –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastUpdate}
                </div>
            </div>
        `;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    renderServiceMetrics(metrics) {
        const services = [
            { name: 'Gateway', key: 'gateway', icon: 'üåê', port: '5000' },
            { name: 'RAG Service', key: 'rag', icon: 'üìö', port: '8001' },
            { name: 'Agents Service', key: 'agents', icon: 'ü§ñ', port: '8002' },
            { name: 'Ollama', key: 'ollama', icon: 'üß†', port: '11434' },
            { name: 'PostgreSQL', key: 'postgres', icon: 'üíæ', port: '5432' },
            { name: 'Qdrant', key: 'qdrant', icon: 'üîç', port: '6333' }
        ];

        return `
            <div class="metrics-section">
                <h3>üèóÔ∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤</h3>
                <div class="services-grid">
                    ${services.map(service => {
                        const serviceMetrics = metrics[service.key] || {};
                        const isHealthy = serviceMetrics.status === 'healthy' || serviceMetrics.up === '1';
                        
                        return `
                            <div class="service-metric-card ${isHealthy ? 'healthy' : 'unhealthy'}">
                                <div class="service-header">
                                    <span class="service-icon">${service.icon}</span>
                                    <span class="service-name">${service.name}</span>
                                    <span class="service-status ${isHealthy ? 'online' : 'offline'}">
                                        ${isHealthy ? 'üü¢' : 'üî¥'}
                                    </span>
                                </div>
                                <div class="service-details">
                                    <div class="service-port">–ü–æ—Ä—Ç: ${service.port}</div>
                                    <div class="service-requests">
                                        –ó–∞–ø—Ä–æ—Å–æ–≤: ${serviceMetrics.requests_total || 0}
                                    </div>
                                    <div class="service-response-time">
                                        –û—Ç–≤–µ—Ç: ${this.formatResponseTime(serviceMetrics.avg_response_time || 0)}
                                    </div>
                                </div>
                            </div>
                        `;
                    }).join('')}
                </div>
            </div>
        `;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    renderPerformanceMetrics(metrics) {
        return `
            <div class="metrics-section">
                <h3>‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
                <div class="performance-grid">
                    <div class="performance-chart">
                        <h4>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º</h4>
                        <div class="chart-placeholder">
                            ${this.renderResponseTimeChart(metrics)}
                        </div>
                    </div>
                    <div class="performance-stats">
                        <h4>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤</h4>
                        <div class="stats-list">
                            <div class="stat-item">
                                <span class="stat-label">–£—Å–ø–µ—à–Ω—ã—Ö (2xx):</span>
                                <span class="stat-value success">${metrics.http?.responses_2xx || 0}</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">–û—à–∏–±–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ (4xx):</span>
                                <span class="stat-value warning">${metrics.http?.responses_4xx || 0}</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">–û—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞ (5xx):</span>
                                <span class="stat-value error">${metrics.http?.responses_5xx || 0}</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</span>
                                <span class="stat-value">${metrics.http?.requests_total || 0}</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    renderResourceMetrics(metrics) {
        return `
            <div class="metrics-section">
                <h3>üíª –†–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã</h3>
                <div class="resources-grid">
                    <div class="resource-item">
                        <h4>üñ•Ô∏è CPU</h4>
                        <div class="resource-bar">
                            <div class="resource-fill" style="width: ${metrics.system?.cpu_usage || 0}%"></div>
                        </div>
                        <div class="resource-value">${metrics.system?.cpu_usage || 0}%</div>
                    </div>
                    <div class="resource-item">
                        <h4>üß† RAM</h4>
                        <div class="resource-bar">
                            <div class="resource-fill" style="width: ${metrics.system?.memory_usage || 0}%"></div>
                        </div>
                        <div class="resource-value">
                            ${this.formatBytes(metrics.system?.memory_used || 0)} / 
                            ${this.formatBytes(metrics.system?.memory_total || 0)}
                        </div>
                    </div>
                    <div class="resource-item">
                        <h4>üíæ –î–∏—Å–∫</h4>
                        <div class="resource-bar">
                            <div class="resource-fill" style="width: ${metrics.system?.disk_usage || 0}%"></div>
                        </div>
                        <div class="resource-value">
                            ${this.formatBytes(metrics.system?.disk_used || 0)} / 
                            ${this.formatBytes(metrics.system?.disk_total || 0)}
                        </div>
                    </div>
                    <div class="resource-item">
                        <h4>üåê –°–µ—Ç—å</h4>
                        <div class="network-stats">
                            <div>–í—Ö–æ–¥—è—â–∏–π: ${this.formatBytes(metrics.network?.bytes_in || 0)}/—Å</div>
                            <div>–ò—Å—Ö–æ–¥—è—â–∏–π: ${this.formatBytes(metrics.network?.bytes_out || 0)}/—Å</div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
     */
    renderAutoRefreshControls() {
        return `
            <div class="metrics-section">
                <h3>üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</h3>
                <div class="auto-refresh-controls">
                    <label class="checkbox-wrapper">
                        <input type="checkbox" id="auto-refresh-toggle" ${this.autoRefresh ? 'checked' : ''}>
                        <span class="checkmark"></span>
                        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ ${this.refreshIntervalMs / 1000} —Å–µ–∫—É–Ω–¥
                    </label>
                    <div class="refresh-interval-controls">
                        <label for="refresh-interval">–ò–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫—É–Ω–¥—ã):</label>
                        <select id="refresh-interval">
                            <option value="10" ${this.refreshIntervalMs === 10000 ? 'selected' : ''}>10</option>
                            <option value="30" ${this.refreshIntervalMs === 30000 ? 'selected' : ''}>30</option>
                            <option value="60" ${this.refreshIntervalMs === 60000 ? 'selected' : ''}>60</option>
                            <option value="300" ${this.refreshIntervalMs === 300000 ? 'selected' : ''}>300</option>
                        </select>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
     */
    renderResponseTimeChart(metrics) {
        // –ü—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–¥–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–æ—Å
        const services = ['gateway', 'rag', 'agents', 'ollama'];
        const maxResponseTime = Math.max(...services.map(s => metrics[s]?.avg_response_time || 0));
        
        return `
            <div class="response-time-chart">
                ${services.map(service => {
                    const responseTime = metrics[service]?.avg_response_time || 0;
                    const percentage = maxResponseTime > 0 ? (responseTime / maxResponseTime) * 100 : 0;
                    
                    return `
                        <div class="chart-bar">
                            <div class="bar-label">${service}</div>
                            <div class="bar-container">
                                <div class="bar-fill" style="width: ${percentage}%"></div>
                            </div>
                            <div class="bar-value">${this.formatResponseTime(responseTime)}</div>
                        </div>
                    `;
                }).join('')}
            </div>
        `;
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ Prometheus –º–µ—Ç—Ä–∏–∫
     */
    parsePrometheusMetrics(rawMetrics) {
        if (typeof rawMetrics === 'object') {
            return rawMetrics; // –£–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ
        }

        // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ Prometheus
        const parsed = {};
        const lines = rawMetrics.split('\n');
        
        lines.forEach(line => {
            if (line.startsWith('#') || !line.trim()) return;
            
            const [metricPart, value] = line.split(' ');
            if (!metricPart || !value) return;
            
            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –º–µ—Ç—Ä–∏–∫–∏ –∏ –ª–µ–π–±–ª–æ–≤
            const metricMatch = metricPart.match(/^([a-zA-Z_][a-zA-Z0-9_]*)(\{.*\})?$/);
            if (!metricMatch) return;
            
            const metricName = metricMatch[1];
            const labels = metricMatch[2] || '';
            
            // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º
            const serviceName = this.extractServiceFromMetric(metricName);
            if (!parsed[serviceName]) {
                parsed[serviceName] = {};
            }
            
            parsed[serviceName][metricName] = parseFloat(value) || value;
        });

        return parsed;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –º–µ—Ç—Ä–∏–∫–∏
     */
    extractServiceFromMetric(metricName) {
        if (metricName.startsWith('aibox_gateway_')) return 'gateway';
        if (metricName.startsWith('aibox_rag_')) return 'rag';
        if (metricName.startsWith('aibox_agents_')) return 'agents';
        if (metricName.startsWith('ollama_')) return 'ollama';
        if (metricName.startsWith('postgres_')) return 'postgres';
        if (metricName.startsWith('qdrant_')) return 'qdrant';
        if (metricName.startsWith('http_')) return 'http';
        if (metricName.startsWith('system_')) return 'system';
        if (metricName.startsWith('network_')) return 'network';
        return 'other';
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    startAutoRefresh() {
        this.stopAutoRefresh(); // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        
        this.refreshInterval = setInterval(() => {
            this.loadSystemMetrics();
        }, this.refreshIntervalMs);
        
        console.log(`üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ (${this.refreshIntervalMs / 1000}—Å)`);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    stopAutoRefresh() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = null;
            console.log('‚èπÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    toggleAutoRefresh() {
        this.autoRefresh = !this.autoRefresh;
        
        if (this.autoRefresh) {
            this.startAutoRefresh();
        } else {
            this.stopAutoRefresh();
        }
    }

    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    setRefreshInterval(seconds) {
        this.refreshIntervalMs = seconds * 1000;
        
        if (this.autoRefresh) {
            this.startAutoRefresh(); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –º–µ—Ç—Ä–∏–∫
     */
    displayMetricsError(error) {
        this.elements.metricsDisplay.innerHTML = `
            <div class="metrics-error">
                <h4>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫</h4>
                <p>${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏'}</p>
                <div class="error-details">
                    <p><strong>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</strong></p>
                    <ul>
                        <li>–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</li>
                        <li>Prometheus –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏</li>
                        <li>–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º</li>
                    </ul>
                </div>
                <button onclick="AIBox.modules.monitoring.loadSystemMetrics()" class="btn-secondary">
                    –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
                </button>
            </div>
        `;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
     */
    formatResponseTime(milliseconds) {
        if (milliseconds < 1) {
            return `${(milliseconds * 1000).toFixed(0)}Œºs`;
        } else if (milliseconds < 1000) {
            return `${milliseconds.toFixed(0)}ms`;
        } else {
            return `${(milliseconds / 1000).toFixed(2)}s`;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    formatDuration(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = Math.floor(seconds % 60);
        
        if (hours > 0) {
            return `${hours}—á ${minutes}–º`;
        } else if (minutes > 0) {
            return `${minutes}–º ${secs}—Å`;
        } else {
            return `${secs}—Å`;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤
     */
    formatBytes(bytes) {
        if (bytes === 0) return '0 B';
        
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –º–µ—Ç—Ä–∏–∫
     */
    addMetricsStyles() {
        if (document.querySelector('#metrics-styles')) return;

        const styles = document.createElement('style');
        styles.id = 'metrics-styles';
        styles.textContent = `
            .metrics-section {
                background: var(--white);
                border: 1px solid var(--gray-200);
                border-radius: var(--radius-lg);
                padding: var(--spacing-6);
                margin-bottom: var(--spacing-6);
            }
            .metrics-section h3 {
                margin-bottom: var(--spacing-4);
                color: var(--gray-900);
            }
            .metrics-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: var(--spacing-4);
            }
            .metric-card {
                background: var(--gray-50);
                padding: var(--spacing-4);
                border-radius: var(--radius-md);
                text-align: center;
                border: 1px solid var(--gray-200);
            }
            .metric-value {
                font-size: var(--font-size-2xl);
                font-weight: 700;
                color: var(--primary-color);
                margin-bottom: var(--spacing-2);
            }
            .metric-label {
                font-weight: 500;
                color: var(--gray-700);
                margin-bottom: var(--spacing-1);
            }
            .metric-trend {
                font-size: var(--font-size-sm);
                color: var(--gray-500);
            }
            .services-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: var(--spacing-4);
            }
            .service-metric-card {
                padding: var(--spacing-4);
                border-radius: var(--radius-md);
                border: 1px solid var(--gray-200);
            }
            .service-metric-card.healthy {
                background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
                border-color: var(--success-color);
            }
            .service-metric-card.unhealthy {
                background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
                border-color: var(--error-color);
            }
            .service-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: var(--spacing-3);
            }
            .service-icon {
                font-size: var(--font-size-lg);
                margin-right: var(--spacing-2);
            }
            .service-name {
                font-weight: 600;
                color: var(--gray-900);
            }
            .service-details {
                font-size: var(--font-size-sm);
                color: var(--gray-600);
            }
            .service-details > div {
                margin-bottom: var(--spacing-1);
            }
            .performance-grid {
                display: grid;
                grid-template-columns: 2fr 1fr;
                gap: var(--spacing-6);
            }
            .chart-placeholder, .response-time-chart {
                background: var(--gray-50);
                padding: var(--spacing-4);
                border-radius: var(--radius-md);
                min-height: 200px;
            }
            .chart-bar {
                display: flex;
                align-items: center;
                margin-bottom: var(--spacing-2);
                gap: var(--spacing-3);
            }
            .bar-label {
                width: 80px;
                font-size: var(--font-size-sm);
                font-weight: 500;
            }
            .bar-container {
                flex: 1;
                height: 20px;
                background: var(--gray-200);
                border-radius: 10px;
                overflow: hidden;
            }
            .bar-fill {
                height: 100%;
                background: linear-gradient(90deg, var(--success-color), var(--primary-color));
                transition: width 0.5s ease;
            }
            .bar-value {
                width: 60px;
                text-align: right;
                font-size: var(--font-size-sm);
                font-weight: 500;
            }
            .stats-list {
                background: var(--gray-50);
                padding: var(--spacing-4);
                border-radius: var(--radius-md);
            }
            .stat-item {
                display: flex;
                justify-content: space-between;
                margin-bottom: var(--spacing-2);
                padding: var(--spacing-2) 0;
                border-bottom: 1px solid var(--gray-200);
            }
            .stat-item:last-child {
                border-bottom: none;
            }
            .stat-value.success { color: var(--success-color); font-weight: 600; }
            .stat-value.warning { color: var(--warning-color); font-weight: 600; }
            .stat-value.error { color: var(--error-color); font-weight: 600; }
            .resources-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: var(--spacing-4);
            }
            .resource-item {
                background: var(--gray-50);
                padding: var(--spacing-4);
                border-radius: var(--radius-md);
                border: 1px solid var(--gray-200);
            }
            .resource-bar {
                height: 20px;
                background: var(--gray-200);
                border-radius: 10px;
                overflow: hidden;
                margin: var(--spacing-2) 0;
            }
            .resource-fill {
                height: 100%;
                background: linear-gradient(90deg, var(--success-color), var(--warning-color));
                transition: width 0.5s ease;
            }
            .resource-value {
                font-size: var(--font-size-sm);
                color: var(--gray-600);
            }
            .network-stats {
                font-size: var(--font-size-sm);
                color: var(--gray-600);
            }
            .network-stats > div {
                margin-bottom: var(--spacing-1);
            }
            .auto-refresh-controls {
                display: flex;
                gap: var(--spacing-6);
                align-items: center;
                background: var(--gray-50);
                padding: var(--spacing-4);
                border-radius: var(--radius-md);
            }
            .refresh-interval-controls {
                display: flex;
                gap: var(--spacing-2);
                align-items: center;
            }
            .refresh-interval-controls select {
                padding: var(--spacing-1) var(--spacing-2);
                border: 1px solid var(--gray-300);
                border-radius: var(--radius-sm);
            }
            .last-update {
                text-align: center;
                font-size: var(--font-size-sm);
                color: var(--gray-500);
                margin-top: var(--spacing-4);
                padding-top: var(--spacing-3);
                border-top: 1px solid var(--gray-200);
            }
        `;
        document.head.appendChild(styles);

        // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            const autoRefreshToggle = document.getElementById('auto-refresh-toggle');
            const refreshInterval = document.getElementById('refresh-interval');

            if (autoRefreshToggle) {
                autoRefreshToggle.addEventListener('change', (e) => {
                    this.autoRefresh = e.target.checked;
                    if (this.autoRefresh) {
                        this.startAutoRefresh();
                    } else {
                        this.stopAutoRefresh();
                    }
                });
            }

            if (refreshInterval) {
                refreshInterval.addEventListener('change', (e) => {
                    this.setRefreshInterval(parseInt(e.target.value));
                });
            }
        }, 100);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    getMonitoringStats() {
        return {
            metricsLoaded: !!this.metrics,
            autoRefresh: this.autoRefresh,
            refreshInterval: this.refreshIntervalMs / 1000,
            lastUpdate: this.metrics ? new Date().toISOString() : null
        };
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
     */
    destroy() {
        this.stopAutoRefresh();
        this.initialized = false;
    }
}