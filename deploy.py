#!/usr/bin/env python3
"""
AI Box - One-Click Deployment Tool
–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è AI Box –≤ –ª—é–±–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ
"""

import os
import sys
import subprocess
import argparse
import yaml
from pathlib import Path

class AIBoxDeployer:
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.config_file = self.project_root / "config" / "aibox-config.yaml"
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.config_file.exists():
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π...")
            self.create_default_config()
        
        with open(self.config_file, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    
    def create_default_config(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        config_dir = self.project_root / "config"
        config_dir.mkdir(exist_ok=True)
        
        default_config = {
            'deployment': {
                'type': 'local',  # local, server, cluster
                'environment': 'development'  # development, production
            },
            'services': {
                'gateway': {'port': 5000, 'replicas': 1},
                'ollama': {'port': 11434, 'replicas': 1, 'models': ['llama3.1', 'codellama']},
                'rag': {'port': 8001, 'replicas': 1},
                'agents': {'port': 8002, 'replicas': 1},
                'database': {'port': 5432, 'type': 'postgresql'},
                'vector_db': {'port': 6333, 'type': 'qdrant'},
                'monitoring': {'prometheus_port': 9090, 'grafana_port': 3000}
            },
            'infrastructure': {
                'local': {
                    'docker_compose': True,
                    'auto_install_docker': True
                },
                'server': {
                    'ansible_host': 'your-server.company.com',
                    'ansible_user': 'admin',
                    'ssh_key_path': '~/.ssh/id_rsa'
                },
                'cluster': {
                    'kubernetes': True,
                    'helm': True,
                    'nodes': ['node1.company.com', 'node2.company.com', 'node3.company.com']
                }
            }
        }
        
        with open(self.config_file, 'w', encoding='utf-8') as f:
            yaml.dump(default_config, f, default_flow_style=False, allow_unicode=True)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {self.config_file}")
    
    def deploy_local(self, config):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ"""
        print("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ AI Box –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
        if not self.check_docker():
            if config['infrastructure']['local']['auto_install_docker']:
                print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Docker...")
                self.install_docker()
            else:
                print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
                return False
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.local.yml
        self.create_local_compose(config)
        
        # 3. –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        print("üîÑ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...")
        subprocess.run(['docker-compose', '-f', 'docker-compose.local.yml', 'up', '-d'], 
                      cwd=self.project_root)
        
        print("‚úÖ AI Box —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –ª–æ–∫–∞–ª—å–Ω–æ!")
        print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000")
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://localhost:3000")
        print("üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:5000/docs")
        
        return True
    
    def deploy_server(self, config):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ Ansible"""
        print("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ AI Box –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Ansible
        if not self.check_ansible():
            print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Ansible...")
            self.install_ansible()
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ Ansible inventory
        self.create_ansible_inventory(config)
        
        # 3. –ó–∞–ø—É—Å–∫ Ansible playbook
        print("üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Ansible...")
        subprocess.run(['ansible-playbook', '-i', 'ansible/inventory.yml', 
                       'ansible/deploy-server.yml'], cwd=self.project_root)
        
        print("‚úÖ AI Box —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
        server_host = config['infrastructure']['server']['ansible_host']
        print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://{server_host}:5000")
        
        return True
    
    def deploy_cluster(self, config):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ —á–µ—Ä–µ–∑ Kubernetes + Helm + Ansible"""
        print("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ AI Box –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.check_cluster_tools()
        
        # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ Ansible
        print("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –∫–ª–∞—Å—Ç–µ—Ä —á–µ—Ä–µ–∑ Ansible...")
        subprocess.run(['ansible-playbook', '-i', 'ansible/cluster-inventory.yml', 
                       'ansible/prepare-cluster.yml'], cwd=self.project_root)
        
        # 3. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Helm
        print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é AI Box —á–µ—Ä–µ–∑ Helm...")
        subprocess.run(['helm', 'install', 'aibox', './helm/aibox', 
                       '-f', 'config/cluster-values.yaml'], cwd=self.project_root)
        
        print("‚úÖ AI Box —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: kubectl get pods -n aibox")
        
        return True
    
    def check_docker(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Docker"""
        try:
            subprocess.run(['docker', '--version'], capture_output=True, check=True)
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            return False
    
    def install_docker(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Docker"""
        system = os.uname().sysname.lower()
        if system == 'linux':
            subprocess.run(['curl', '-fsSL', 'https://get.docker.com', '-o', 'get-docker.sh'])
            subprocess.run(['sh', 'get-docker.sh'])
            subprocess.run(['sudo', 'systemctl', 'enable', 'docker'])
            subprocess.run(['sudo', 'systemctl', 'start', 'docker'])
        else:
            print("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Linux")
            print("üìñ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –≤—Ä—É—á–Ω—É—é: https://docs.docker.com/get-docker/")
    
    def check_ansible(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Ansible"""
        try:
            subprocess.run(['ansible', '--version'], capture_output=True, check=True)
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            return False
    
    def install_ansible(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Ansible"""
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'ansible'])
    
    def check_cluster_tools(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞"""
        tools = ['kubectl', 'helm', 'ansible']
        for tool in tools:
            try:
                subprocess.run([tool, '--version'], capture_output=True, check=True)
                print(f"‚úÖ {tool} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except (subprocess.CalledProcessError, FileNotFoundError):
                print(f"‚ùå {tool} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∞.")
                return False
        return True
    
    def create_local_compose(self, config):
        """–°–æ–∑–¥–∞–µ—Ç docker-compose —Ñ–∞–π–ª –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        compose_content = f"""version: '3.8'

services:
  # AI Box Gateway
  gateway:
    build: 
      context: .
      dockerfile: Dockerfile.gateway
    ports:
      - "{config['services']['gateway']['port']}:5000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/aibox
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_URL=http://ollama:11434
    depends_on:
      - postgres
      - qdrant
      - ollama
    networks:
      - aibox-network

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    ports:
      - "{config['services']['ollama']['port']}:11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - aibox-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # RAG Service
  rag:
    build:
      context: ./services/rag
    ports:
      - "{config['services']['rag']['port']}:8001"
    environment:
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_URL=http://ollama:11434
    depends_on:
      - qdrant
      - ollama
    networks:
      - aibox-network

  # AI Agents Service
  agents:
    build:
      context: ./services/agents
    ports:
      - "{config['services']['agents']['port']}:8002"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/aibox
      - OLLAMA_URL=http://ollama:11434
    depends_on:
      - postgres
      - ollama
    networks:
      - aibox-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: aibox
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "{config['services']['database']['port']}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - aibox-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "{config['services']['vector_db']['port']}:6333"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - aibox-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "{config['services']['monitoring']['prometheus_port']}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - aibox-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "{config['services']['monitoring']['grafana_port']}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - aibox-network

volumes:
  postgres-data:
  qdrant-data:
  ollama-data:
  prometheus-data:
  grafana-data:

networks:
  aibox-network:
    driver: bridge
"""
        
        with open(self.project_root / 'docker-compose.local.yml', 'w') as f:
            f.write(compose_content)
    
    def create_ansible_inventory(self, config):
        """–°–æ–∑–¥–∞–µ—Ç Ansible inventory –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
        ansible_dir = self.project_root / 'ansible'
        ansible_dir.mkdir(exist_ok=True)
        
        inventory = {
            'aibox_servers': {
                'hosts': {
                    config['infrastructure']['server']['ansible_host']: {
                        'ansible_user': config['infrastructure']['server']['ansible_user'],
                        'ansible_ssh_private_key_file': config['infrastructure']['server']['ssh_key_path']
                    }
                }
            }
        }
        
        with open(ansible_dir / 'inventory.yml', 'w') as f:
            yaml.dump(inventory, f, default_flow_style=False)

def main():
    parser = argparse.ArgumentParser(description='AI Box - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è')
    parser.add_argument('deployment_type', choices=['local', 'server', 'cluster'],
                       help='–¢–∏–ø —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è')
    parser.add_argument('--config', '-c', default='config/aibox-config.yaml',
                       help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É')
    
    args = parser.parse_args()
    
    deployer = AIBoxDeployer()
    config = deployer.load_config()
    
    print(f"üéØ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ AI Box: {args.deployment_type}")
    print("=" * 50)
    
    if args.deployment_type == 'local':
        success = deployer.deploy_local(config)
    elif args.deployment_type == 'server':
        success = deployer.deploy_server(config)
    elif args.deployment_type == 'cluster':
        success = deployer.deploy_cluster(config)
    
    if success:
        print("\nüéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ./docs/")
        print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ./config/aibox-config.yaml")
    else:
        print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏")
        sys.exit(1)

if __name__ == '__main__':
    main()