version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: aibox-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aibox}
      POSTGRES_USER: ${POSTGRES_USER:-aibox}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aibox}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aibox-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: aibox-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aibox-network

  # Ollama LLM Service
  ollama:
    build:
      context: ./services/ollama
      dockerfile: Dockerfile
    container_name: aibox-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_MODELS: ${OLLAMA_MODEL:-llama3.2:3b}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 5
    networks:
      - aibox-network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # RAG Service
  rag:
    build:
      context: ./services/rag
      dockerfile: Dockerfile
    container_name: aibox-rag
    ports:
      - "8001:8001"
    environment:
      OLLAMA_API_BASE: http://ollama:11434
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-aibox}
      POSTGRES_USER: ${POSTGRES_USER:-aibox}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    depends_on:
      ollama:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./services/rag/config.yaml:/app/config.yaml:ro
    networks:
      - aibox-network

  # AI Agents Service
  agents:
    build:
      context: ./services/agents
      dockerfile: Dockerfile
    container_name: aibox-agents
    ports:
      - "8002:8002"
    environment:
      OLLAMA_API_BASE: http://ollama:11434
      RAG_API_BASE: http://rag:8001
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-aibox}
      POSTGRES_USER: ${POSTGRES_USER:-aibox}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    depends_on:
      - ollama
      - rag
      - postgres
    networks:
      - aibox-network

  # Gateway Service
  gateway:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    container_name: aibox-gateway
    ports:
      - "5000:5000"
    environment:
      OLLAMA_API_BASE: http://ollama:11434
      RAG_API_BASE: http://rag:8001
      AGENTS_API_BASE: http://agents:8002
      SECRET_KEY: ${GATEWAY_SECRET_KEY:-your-secret-key-here}
      API_TOKEN: ${API_TOKEN:-your-api-token-here}
    depends_on:
      - ollama
      - rag
      - agents
    networks:
      - aibox-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: aibox-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./services/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - aibox-network

  # Grafana Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: aibox-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./services/monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - aibox-network

volumes:
  postgres_data:
  qdrant_data:
  ollama_data:
  prometheus_data:
  grafana_data:

networks:
  aibox-network:
    driver: bridge
