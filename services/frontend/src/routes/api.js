/**
 * API Routes –¥–ª—è Frontend Service
 * –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI Box Gateway —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
 */

const express = require('express');
const router = express.Router();
const ApiClient = require('../utils/apiClient');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
const GATEWAY_URL = process.env.GATEWAY_URL || 'http://gateway:5000';
const apiClient = new ApiClient(GATEWAY_URL);

/**
 * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
 */
const handleApiResponse = (req, res, next) => {
  res.apiResponse = (result) => {
    if (result.success) {
      res.json({
        success: true,
        data: result.data,
        timestamp: new Date().toISOString()
      });
    } else {
      const statusCode = result.error?.status || 500;
      res.status(statusCode).json({
        success: false,
        error: result.error,
        timestamp: new Date().toISOString(),
        request_id: req.headers['x-request-id'] || 'unknown'
      });
    }
  };
  next();
};

router.use(handleApiResponse);

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Gateway
 */
router.get('/gateway/health', async (req, res) => {
  const result = await apiClient.checkHealth();
  res.apiResponse(result);
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
 */
router.get('/services', async (req, res) => {
  const result = await apiClient.getServicesInfo();
  res.apiResponse(result);
});

/**
 * –ß–∞—Ç —Å AI
 */
router.post('/chat', async (req, res) => {
  const { message, service_type = 'general', session_id } = req.body;
  
  if (!message) {
    return res.status(400).json({
      success: false,
      error: {
        type: 'validation_error',
        message: '–ü–æ–ª–µ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
      }
    });
  }

  const result = await apiClient.sendChatMessage(message, service_type, session_id);
  res.apiResponse(result);
});

/**
 * RAG Service Routes
 */

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
router.post('/rag/upload', async (req, res) => {
  try {
    const file = req.files?.file;
    const metadata = req.body.metadata ? JSON.parse(req.body.metadata) : {};
    
    if (!file) {
      return res.status(400).json({
        success: false,
        error: {
          type: 'validation_error',
          message: '–§–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
        }
      });
    }

    const result = await apiClient.uploadDocument(file, metadata);
    res.apiResponse(result);
  } catch (error) {
    res.status(500).json({
      success: false,
      error: {
        type: 'processing_error',
        message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞',
        details: error.message
      }
    });
  }
});

// –ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
router.post('/rag/search', async (req, res) => {
  const { query, filters = {} } = req.body;
  
  if (!query) {
    return res.status(400).json({
      success: false,
      error: {
        type: 'validation_error',
        message: '–ü–æ–ª–µ query –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
      }
    });
  }

  const result = await apiClient.searchDocuments(query, filters);
  res.apiResponse(result);
});

/**
 * Agents Service Routes
 */

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
router.get('/agents', async (req, res) => {
  const result = await apiClient.getAvailableAgents();
  res.apiResponse(result);
});

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–º
router.post('/agents/execute', async (req, res) => {
  const { agent_type, task, context = {} } = req.body;
  
  if (!agent_type || !task) {
    return res.status(400).json({
      success: false,
      error: {
        type: 'validation_error',
        message: '–ü–æ–ª—è agent_type –∏ task –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
      }
    });
  }

  const result = await apiClient.executeAgentTask(agent_type, task, context);
  res.apiResponse(result);
});

/**
 * Database Service Routes
 */

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
router.get('/database/schema', async (req, res) => {
  const result = await apiClient.getDatabaseSchema();
  res.apiResponse(result);
});

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
router.post('/database/query', async (req, res) => {
  const { query, safe_mode = true } = req.body;
  
  if (!query) {
    return res.status(400).json({
      success: false,
      error: {
        type: 'validation_error',
        message: '–ü–æ–ª–µ query –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
      }
    });
  }

  const result = await apiClient.executeDatabaseQuery(query, safe_mode);
  res.apiResponse(result);
});

/**
 * –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
 */
router.get('/metrics', async (req, res) => {
  const result = await apiClient.getSystemMetrics();
  res.apiResponse(result);
});

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏—Ä—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º API Gateway endpoints
 */
router.post('/proxy', async (req, res) => {
  const { method = 'GET', path, data, params } = req.body;
  
  if (!path) {
    return res.status(400).json({
      success: false,
      error: {
        type: 'validation_error',
        message: '–ü–æ–ª–µ path –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è'
      }
    });
  }
  
  console.log(`üîÑ –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: ${method.toUpperCase()} ${path}`);
  
  try {
    const result = await apiClient.request(method, path, data, { params });
    res.apiResponse({ success: true, data: result });
  } catch (error) {
    res.apiResponse({ success: false, error });
  }
});

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Frontend Service
 */
router.get('/info', (req, res) => {
  res.json({
    success: true,
    data: {
      service: 'aibox-frontend',
      version: '1.0.0',
      description: 'AI Box Frontend Service - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–±–æ—Å–æ–±–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
      gateway_url: GATEWAY_URL,
      features: [
        'API –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Gateway',
        'WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫',
        'Rate limiting',
        'CORS –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        'Health monitoring'
      ],
      endpoints: {
        '/api/gateway/health': '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Gateway',
        '/api/services': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö',
        '/api/chat': '–ß–∞—Ç —Å AI',
        '/api/rag/*': 'RAG —Å–µ—Ä–≤–∏—Å endpoints',
        '/api/agents/*': 'AI Agents endpoints',
        '/api/database/*': 'Database —Å–µ—Ä–≤–∏—Å endpoints',
        '/api/metrics': '–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏',
        '/api/proxy/*': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ'
      }
    },
    timestamp: new Date().toISOString()
  });
});

module.exports = router;