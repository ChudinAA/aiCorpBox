
#!/usr/bin/env python3
"""
Test Client –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ AI Box
"""

import asyncio
import aiohttp
import json
import time
from typing import Dict, Any

class ServiceTester:
    def __init__(self):
        self.base_urls = {
            "gateway": "http://0.0.0.0:5000",
            "rag": "http://0.0.0.0:8001", 
            "agents": "http://0.0.0.0:8002",
            "ollama": "http://0.0.0.0:11434",
            "qdrant": "http://0.0.0.0:6333"
        }
        
    async def test_service_health(self, session: aiohttp.ClientSession, service: str, url: str):
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            health_endpoint = f"{url}/health" if service != "ollama" else f"{url}/api/version"
            async with session.get(health_endpoint) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ {service}: {data}")
                    return True
                else:
                    print(f"‚ùå {service}: HTTP {response.status}")
                    return False
        except Exception as e:
            print(f"‚ùå {service}: {e}")
            return False
    
    async def test_gateway_demo(self, session: aiohttp.ClientSession):
        """–¢–µ—Å—Ç demo chat —á–µ—Ä–µ–∑ gateway"""
        try:
            url = f"{self.base_urls['gateway']}/api/demo/chat"
            payload = {
                "message": "Test message from service tester",
                "service_type": "general",
                "session_id": "test-session"
            }
            
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Gateway Demo Chat: {data['response'][:100]}...")
                    return True
                else:
                    print(f"‚ùå Gateway Demo Chat: HTTP {response.status}")
                    return False
        except Exception as e:
            print(f"‚ùå Gateway Demo Chat: {e}")
            return False
    
    async def test_rag_query(self, session: aiohttp.ClientSession):
        """–¢–µ—Å—Ç RAG —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            url = f"{self.base_urls['rag']}/query"
            payload = {
                "query": "Test query for RAG service",
                "session_id": "test-session"
            }
            
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ RAG Query: {data}")
                    return True
                else:
                    print(f"‚ùå RAG Query: HTTP {response.status}")
                    return False
        except Exception as e:
            print(f"‚ùå RAG Query: {e}")
            return False
    
    async def test_agents_execute(self, session: aiohttp.ClientSession):
        """–¢–µ—Å—Ç Agents —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            url = f"{self.base_urls['agents']}/execute"
            payload = {
                "task": "Test task for agents service",
                "agent_type": "general"
            }
            
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Agents Execute: {data}")
                    return True
                else:
                    print(f"‚ùå Agents Execute: HTTP {response.status}")
                    return False
        except Exception as e:
            print(f"‚ùå Agents Execute: {e}")
            return False
    
    async def test_ollama_chat(self, session: aiohttp.ClientSession):
        """–¢–µ—Å—Ç Ollama —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            url = f"{self.base_urls['ollama']}/api/chat"
            payload = {
                "model": "llama3.1",
                "messages": [{"role": "user", "content": "Test message"}]
            }
            
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Ollama Chat: {data}")
                    return True
                else:
                    print(f"‚ùå Ollama Chat: HTTP {response.status}")
                    return False
        except Exception as e:
            print(f"‚ùå Ollama Chat: {e}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ AI Box...\n")
        
        async with aiohttp.ClientSession() as session:
            # –¢–µ—Å—Ç—ã –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤:")
            health_results = []
            for service, url in self.base_urls.items():
                result = await self.test_service_health(session, service, url)
                health_results.append(result)
                await asyncio.sleep(0.5)
            
            print(f"\nüìä –ó–¥–æ—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {sum(health_results)}/{len(health_results)}")
            
            if sum(health_results) == 0:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤. –ó–∞–ø—É—Å—Ç–∏—Ç–µ dev_environment.py")
                return
            
            print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:")
            
            # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
            await self.test_gateway_demo(session)
            await asyncio.sleep(1)
            
            await self.test_rag_query(session)
            await asyncio.sleep(1)
            
            await self.test_agents_execute(session)
            await asyncio.sleep(1)
            
            await self.test_ollama_chat(session)
            
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    tester = ServiceTester()
    asyncio.run(tester.run_all_tests())
