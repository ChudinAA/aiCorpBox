/**
 * WebSocket Manager –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ Frontend Service
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π –∫ Gateway
 */

const WebSocket = require('ws');

class WebSocketManager {
  constructor() {
    this.gatewayWs = null;
    this.reconnectInterval = 5000;
    this.maxReconnectAttempts = 10;
    this.reconnectAttempts = 0;
    this.messageQueue = [];
    this.isConnecting = false;
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gateway WebSocket
   */
  async connectToGateway() {
    if (this.isConnecting || (this.gatewayWs && this.gatewayWs.readyState === WebSocket.OPEN)) {
      return;
    }

    const gatewayUrl = process.env.GATEWAY_URL || 'http://gateway:5000';
    const wsUrl = gatewayUrl.replace('http', 'ws') + '/ws';

    this.isConnecting = true;

    try {
      console.log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gateway WebSocket: ${wsUrl}`);
      
      this.gatewayWs = new WebSocket(wsUrl);

      this.gatewayWs.on('open', () => {
        console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Gateway —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        this.isConnecting = false;
        this.reconnectAttempts = 0;
        this.flushMessageQueue();
      });

      this.gatewayWs.on('close', (code, reason) => {
        console.log(`üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Gateway –∑–∞–∫—Ä—ã—Ç–æ: ${code} ${reason}`);
        this.isConnecting = false;
        this.scheduleReconnect();
      });

      this.gatewayWs.on('error', (error) => {
        console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞ Gateway:', error);
        this.isConnecting = false;
        this.scheduleReconnect();
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gateway WebSocket:', error);
      this.isConnecting = false;
      this.scheduleReconnect();
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  scheduleReconnect() {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gateway');
      return;
    }

    this.reconnectAttempts++;
    const delay = Math.min(this.reconnectInterval * this.reconnectAttempts, 30000);
    
    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gateway ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${delay}ms`);
    
    setTimeout(() => {
      this.connectToGateway();
    }, delay);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  flushMessageQueue() {
    while (this.messageQueue.length > 0 && this.gatewayWs && this.gatewayWs.readyState === WebSocket.OPEN) {
      const message = this.messageQueue.shift();
      this.gatewayWs.send(JSON.stringify(message));
    }
  }

  /**
   * –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ Gateway
   */
  async proxyMessage(data) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
    if (!this.gatewayWs || this.gatewayWs.readyState !== WebSocket.OPEN) {
      await this.connectToGateway();
    }

    return new Promise((resolve, reject) => {
      const messageId = Date.now() + '_' + Math.random().toString(36).substr(2, 9);
      const messageWithId = { ...data, frontend_message_id: messageId };

      // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
      if (this.gatewayWs && this.gatewayWs.readyState === WebSocket.OPEN) {
        this.gatewayWs.send(JSON.stringify(messageWithId));

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞
        const responseHandler = (message) => {
          try {
            const response = JSON.parse(message);
            if (response.frontend_message_id === messageId) {
              this.gatewayWs.removeListener('message', responseHandler);
              resolve(response);
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Gateway:', error);
          }
        };

        this.gatewayWs.on('message', responseHandler);

        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        setTimeout(() => {
          this.gatewayWs.removeListener('message', responseHandler);
          resolve({
            type: 'error',
            message: 'Timeout: Gateway –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥',
            frontend_message_id: messageId
          });
        }, 30000);

      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
        this.messageQueue.push(messageWithId);
        resolve({
          type: 'queued',
          message: '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gateway',
          frontend_message_id: messageId
        });
      }
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
   */
  async sendChatMessage(message, serviceType = 'general') {
    return this.proxyMessage({
      type: 'chat_message',
      message,
      service_type: serviceType,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞
   */
  async requestAgentStatus(agentId) {
    return this.proxyMessage({
      type: 'agent_status_request',
      agent_id: agentId,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ RAG
   */
  async subscribeToRAGUpdates(searchId) {
    return this.proxyMessage({
      type: 'rag_subscribe',
      search_id: searchId,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async requestSystemNotifications() {
    return this.proxyMessage({
      type: 'system_notifications_request',
      timestamp: new Date().toISOString()
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  isConnected() {
    return this.gatewayWs && this.gatewayWs.readyState === WebSocket.OPEN;
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  disconnect() {
    if (this.gatewayWs) {
      this.reconnectAttempts = this.maxReconnectAttempts; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      this.gatewayWs.close(1000, 'Frontend service shutdown');
      this.gatewayWs = null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStats() {
    return {
      connected: this.isConnected(),
      reconnectAttempts: this.reconnectAttempts,
      queuedMessages: this.messageQueue.length,
      gatewayUrl: process.env.GATEWAY_URL || 'http://gateway:5000'
    };
  }
}

module.exports = WebSocketManager;