#!/usr/bin/env python3
"""
AI Box - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ quick-deploy.sh
"""

import os
import sys
import yaml
from pathlib import Path

class AIBoxHelper:
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.config_file = self.project_root / "config" / "aibox-config.yaml"
    
    def create_default_config(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        if self.config_file.exists():
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
            
        config_dir = self.project_root / "config"
        config_dir.mkdir(exist_ok=True)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config/aibox-config.yaml
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {self.config_file}")
    
    def validate_config(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            required_sections = ['deployment', 'services', 'infrastructure']
            for section in required_sections:
                if section not in config:
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è '{section}' –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    return False
            
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def get_service_ports(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            services = config.get('services', {})
            ports = {}
            
            for service, settings in services.items():
                if 'port' in settings:
                    ports[service] = settings['port']
            
            return ports
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤: {e}")
            return {}
    
    def check_requirements(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
        import psutil
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ RAM
        memory_gb = psutil.virtual_memory().total / (1024**3)
        cpu_count = psutil.cpu_count()
        
        print(f"üíæ RAM: {memory_gb:.1f} GB")
        print(f"üñ•Ô∏è  CPU: {cpu_count} cores")
        
        if memory_gb < 4:
            print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 4GB RAM")
        if cpu_count < 2:
            print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2 CPU cores")
        
        return memory_gb >= 2 and cpu_count >= 1  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='AI Box - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã')
    parser.add_argument('--create-config', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
    parser.add_argument('--validate-config', action='store_true',
                       help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--check-requirements', action='store_true',
                       help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--get-ports', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤')
    
    args = parser.parse_args()
    
    if not any(vars(args).values()):
        parser.print_help()
        return
    
    helper = AIBoxHelper()
    
    if args.create_config:
        helper.create_default_config()
    
    if args.validate_config:
        helper.validate_config()
    
    if args.check_requirements:
        helper.check_requirements()
    
    if args.get_ports:
        ports = helper.get_service_ports()
        print("üåê –ü–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤:")
        for service, port in ports.items():
            print(f"  - {service}: {port}")

if __name__ == '__main__':
    main()